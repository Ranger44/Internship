The Complete ASP.NET MVC 5

MVC Architectural Pattern
    - MVC = Model, View, Controller
    - architectural pattern for implementing user interfaces
    - similar frameworks include Ruby on Rails or Express for Node
    - MODEL
        - application data and behavior in terms of its problem domain, and independent of the UI
    - VIEW
        - the HTML markup that we display to the user
    - CONTROLLER
        - responsible for handling HTTP requests
    - ROUTER
        - selects the correct controller
        
Controller
    - ActionResult
        - base class for all action results 
        - ViewResult
        - PartialViewResult
        - RedirectResult
        - RedirectToRouteResult
        - JsonResult
        - FileResult
        - HttpNotFoundResult
        - EmptyResult
    - Action Parameters
        - the input of our actions
        
Routing
    - custom route
        in RouteConfig.cs:
            routes.MapRoute(
                "MoviesByReleaseDate",
                    "movies/released/{year}/{month}",
                    new { controller = "Movies", action = "ByReleaseDate" },
                    new { year = @"\d{4}", month = @"\d{2}"} //year must be 4 digits, month must be 2 digits
                );
        in MoviesController:
            public ActionResult ByReleaseDate(int year, int month)
            {
                return Content(year + "/" + month);  
            }
    - attribute routing
        1. enable in RouteConfig.cs
            routes.MapMvcAttributeRoutes();
        2. apply route in Controller.cs
            [Route("movies/released/{year}/{month:regex(\\d{2}):range(1,12)}")]  //regex = regular expression 
            public ActionResult ByReleaseDate(int year, int month)
            {
                return Content(year + "/" + month);
            }
            
Pass Data to a View
    - In MovieController.cs:
        return View(movie);
    - In Random.cshtml:
        <h2>@Model.Name</h2>
        
Model - (Data) Carries the info shown to or collected from users
    - abstract data structure (usually a class)
    - reflects thte status and behaviors of real-world objects with its properties and methods
    - translate a table schema to a model class
    - 
View (User Interface) - Show data, collect data, pass operations to the logic
    - passes user's commands/operations to the controller
    - view model is the data rendered by a view
Controller (Logic) - Process data, respond to user operations, choose proper user interface to show data.
    - repsonds to the commands from user
    - manipulates models
    - picks proper views for models or picks proper models for views
    
SOLID Principle
    S - Single Responsibility Principle
        - a class should only have one responsibility
    O - Open/closed principle
        - "software entities should be open for extension byut closed for modification"
    L - Liskoov substitution principle
        - objects in a program should be replaceable with instances of their subtypes without altering the correctness of the program
        - AKA design by contract
    I - Interface Segregation Principle
        - many client-specific interfaces are better than one general-purpose interface
    D - Dependency Inversion principle
        - one should "depend upon abstractions, NOT concretions"
        
CONTROLLERS AND ACTIONS
    - A controller is a .NET class that used to define and group a set of actions. An action (or action method) is a method on a controller which handles HTTP requests.
    - A controller logically groups actions together. 
    - Action = controller that handles HTTP requests
    
URL Routing
    Conventional routing - {controller=Home}/{action=Index}/{id?}
    Attribute routing - if a controller class is modified by [Route("Product")], all URLs start with Product will be navigated to this controller. 
        If an action in this controller is modified by [Route("Create")], the URL product/create will be handled just by this action
    
VIEWS
    - Razor view    
        - HTML elements
        - executable code has a leading @ and should be a block of C#